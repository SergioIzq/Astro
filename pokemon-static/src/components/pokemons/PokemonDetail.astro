---
import type {
  Ability,
  Move,
  Stat,
  Type,
} from "@interfaces/pokemon-list.response";

interface Props {
  abilities: Ability[];
  moves: Move[];
  height: number;
  weight: number;
  types: Type[];
  stats: Stat[];
}

const { abilities, moves, height, weight, types, stats } = Astro.props;

const abilitiesData = await Promise.all(
  abilities.map(async (item) => {
    if (!item.ability?.url) return null;

    const res = await fetch(item.ability.url);
    const data = await res.json();

    // Buscar solo la entrada en español
    const effectEs =
      data.effect_entries.find((entry: any) => entry.language.name === "es") ??
      data.effect_entries.find((entry: any) => entry.language.name === "en");

    return {
      name: item.ability.name,
      effect: effectEs?.effect ?? "",
      short_effect: effectEs?.short_effect ?? "",
    };
  }),
);

const movesData = await Promise.all(
  moves.map(async (item) => {
    if (!item.move?.url) return null;

    const res = await fetch(item.move.url);
    const data = await res.json();

    // Buscar solo la entrada en español
    const effectEs =
      data.effect_entries.find((entry: any) => entry.language.name === "es") ??
      data.effect_entries.find((entry: any) => entry.language.name === "en");

    return {
      name: item.move.name,
      effect: effectEs?.effect ?? "",
      short_effect: effectEs?.short_effect ?? "",
    };
  }),
);

const heightMeters = height / 10; // decímetros → metros
const weightKg = weight / 10; // hectogramos → kilogramos

const typeColorMap: Record<string, string> = {
  normal: "bg-gray-400",
  fire: "bg-red-500",
  water: "bg-blue-500",
  electric: "bg-yellow-400",
  grass: "bg-green-500",
  ice: "bg-cyan-300",
  fighting: "bg-red-700",
  poison: "bg-purple-500",
  ground: "bg-yellow-700",
  flying: "bg-indigo-300",
  psychic: "bg-pink-500",
  bug: "bg-green-700",
  rock: "bg-gray-700",
  ghost: "bg-indigo-800",
  dragon: "bg-purple-700",
  dark: "bg-gray-800",
  steel: "bg-gray-500",
  fairy: "bg-pink-300",
};

const statColorMap: Record<string, string> = {
  hp: "bg-red-500",
  attack: "bg-orange-500",
  defense: "bg-yellow-500",
  "special-attack": "bg-purple-500",
  "special-defense": "bg-pink-500",
  speed: "bg-green-500",
};
---

<section
  class="mt-10 relative bg-gray-900 p-6 rounded-lg shadow-md flex flex-col gap-4"
>
  {/* Título flotante */}
  <h2
    class="absolute -top-4 left-4 text-lg font-bold text-white bg-gray-900 px-2 rounded"
  >
    Datos del Pokémon
  </h2>

  {/* Tipos */}
  <div class="flex flex-wrap gap-2">
    {
      types.map(({ type }) => (
        <span
          class={`px-3 py-1 rounded-full text-white text-sm capitalize ${
            typeColorMap[type.name] || "bg-gray-600"
          }`}
        >
          {type.name}
        </span>
      ))
    }
  </div>

  {/* Peso y altura en cascada */}
  <div class="flex flex-col gap-2 mt-2">
    <div
      class="flex items-center gap-2 bg-gray-800 text-white px-3 py-1 rounded-full"
    >
      <span class="font-semibold">Altura: {heightMeters} m</span>
    </div>
    <div
      class="flex items-center gap-2 bg-gray-800 text-white px-3 py-1 rounded-full"
    >
      <span class="font-semibold">Peso: {weightKg} kg</span>
    </div>
  </div>
</section>

<section
  class="mt-10 relative bg-gray-900 p-6 rounded-lg shadow-md flex flex-col gap-4"
>
  <h2
    class="absolute -top-4 left-4 text-lg font-bold text-white bg-gray-900 px-2 rounded"
  >
    Habilidades
  </h2>
  <ul class="grid grid-cols-[repeat(auto-fit,minmax(200px,1fr))] gap-3">
    {
      abilitiesData
        .filter(
          (
            ability,
          ): ability is {
            name: string;
            effect: string;
            short_effect: string;
          } => ability !== null,
        )
        .map(({ name, short_effect }) => (
          <li class="bg-gray-800 text-white rounded-md p-3 hover:bg-gray-700 transition-colors flex flex-col">
            <span class="font-semibold text-blue-400 capitalize">{name}</span>
            <p class="text-gray-300 mt-1 text-sm line-clamp-3">
              {short_effect}
            </p>
          </li>
        ))
    }
  </ul>
</section>

<section>
  <div class="max-h-96 overflow-y-auto mt-5 border rounded-md">
    <table class="table-auto w-full text-sm text-left text-gray-700">
      <thead class="bg-gray-100 sticky top-0">
        <tr>
          <th class="px-2 py-1">Movimientos</th>
          <th class="px-2 py-1">Descripción</th>
        </tr>
      </thead>
      <tbody>
        {
          movesData
            .filter(
              (
                move,
              ): move is { name: string; effect: any; short_effect: string } =>
                move !== null &&
                typeof move.name === "string" &&
                typeof move.short_effect === "string",
            )
            .map(({ name, short_effect }) => (
              <tr class="hover:bg-gray-700 transition cursor-pointer">
                <td class="px-2 py-1 font-semibold text-blue-500 capitalize">
                  {name}
                </td>
                <td class="px-2 py-1 text-white">{short_effect}</td>
              </tr>
            ))
        }
      </tbody>
    </table>
  </div>
</section>

<section class="mt-10 relative bg-gray-900 p-6 rounded-lg shadow-md">
  <!-- Título flotante -->
  <h2
    class="absolute -top-4 left-4 bg-gray-900 px-2 text-lg font-bold text-white rounded"
  >
    Estadísticas Base
  </h2>
  <div class="flex flex-col gap-3">
    {
      (() => {
        const maxStat = Math.max(...stats.map((s) => s.base_stat)); // máximo dentro del Pokémon
        return stats.map(({ base_stat, stat }) => {
          const statPercent = (base_stat / maxStat) * 100; // escala proporcional
          return (
            <div class="flex flex-col gap-1">
              {/* Nombre y valor */}
              <div class="flex justify-between text-white text-sm font-semibold capitalize">
                <span>{stat.name.replace("-", " ")}</span>
                <span>{base_stat}</span>
              </div>
              {/* Barra */}
              <div class="w-full bg-gray-700 rounded-full h-4">
                <div
                  class={`${statColorMap[stat.name] || "bg-blue-500"} h-4 rounded-full transition-all duration-300`}
                  style={{ width: `${statPercent}%` }}
                />
              </div>
            </div>
          );
        });
      })()
    }
  </div>
</section>
